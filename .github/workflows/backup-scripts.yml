name: 自动备份脚本

on:
  schedule:
    # 每1小时运行一次
    - cron: '0 */1 * * *'
  workflow_dispatch: # 手动触发
  push:
    paths:
      - 'config/scripts.json'

jobs:
  backup-scripts:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: 备份脚本
      run: |
        # 创建脚本目录
        mkdir -p scripts
        
        # 读取配置并下载脚本
        node -e "
        const fs = require('fs');
        const https = require('https');
        const http = require('http');
        const { URL } = require('url');
        
        const config = JSON.parse(fs.readFileSync('config/scripts.json', 'utf8'));
        
        // 智能版本探测系统
        class VersionDetector {
          constructor() {
            this.successfulVersions = new Map(); // 记录成功的版本
            this.knownPatterns = [
              // 已知工作的版本模式
              'Forward/1.3.6 (2025082802)',
              'Forward/1.3.6 (2025082801)',
              
              // 基于日期的版本生成
              ...this.generateDateBasedVersions(),
              
              // 常见版本模式
              'Forward/1.3.7 (2025082701)',
              'Forward/1.3.8 (2025082601)',
              'Forward/1.4.0 (2025082801)',
              
              // iOS版本格式（作为备用）
              'Forward/1.3.6 (iOS 18.1; iPhone 15 Pro)',
              'Forward/1.3.7 (iOS 18.0; iPhone 15 Pro Max)',
            ];
          }
          
          generateDateBasedVersions() {
            const versions = [];
            const today = new Date();
            
            // 生成最近7天的版本
            for (let dayOffset = 0; dayOffset < 7; dayOffset++) {
              const date = new Date(today);
              date.setDate(date.getDate() - dayOffset);
              
              const year = date.getFullYear();
              const month = (date.getMonth() + 1).toString().padStart(2, '0');
              const day = date.getDate().toString().padStart(2, '0');
              const dateStr = \`\${year}\${month}\${day}\`;
              
              // 每天生成多个可能的版本
              for (let build = 1; build <= 10; build++) {
                const buildStr = build.toString().padStart(2, '0');
                versions.push(\`Forward/1.3.6 (\${dateStr}\${buildStr})\`);
                if (build <= 3) {
                  versions.push(\`Forward/1.3.7 (\${dateStr}\${buildStr})\`);
                  versions.push(\`Forward/1.3.8 (\${dateStr}\${buildStr})\`);
                }
              }
            }
            return versions;
          }
          
          async detectVersion(url, maxAttempts = 20) {
            const hostname = new URL(url).hostname;
            
            // 如果不是需要特殊处理的域名，返回默认User-Agent
            if (hostname !== 'widgets-xd.vercel.app') {
              return 'Mozilla/5.0 (compatible; GitHub-Actions-Script-Backup/1.0)';
            }
            
            // 如果之前成功过，优先使用成功的版本
            if (this.successfulVersions.has(hostname)) {
              const successful = this.successfulVersions.get(hostname);
              console.log(\`使用之前成功的版本: \${successful}\`);
              return successful;
            }
            
            console.log(\`开始智能探测 \${hostname} 的有效版本...\`);
            
            // 快速探测有效版本
            for (let i = 0; i < Math.min(maxAttempts, this.knownPatterns.length); i++) {
              const version = this.knownPatterns[i];
              console.log(\`探测第\${i+1}次: \${version}\`);
              
              try {
                const isValid = await this.testVersion(url, version);
                if (isValid) {
                  console.log(\`✅ 找到有效版本: \${version}\`);
                  this.successfulVersions.set(hostname, version);
                  return version;
                }
              } catch (error) {
                console.log(\`❌ 版本无效: \${version} - \${error.message}\`);
              }
              
              // 短暂延迟避免被限流
              await new Promise(resolve => setTimeout(resolve, 200));
            }
            
            console.log('⚠️ 未找到有效版本，使用默认User-Agent');
            return 'Mozilla/5.0 (compatible; GitHub-Actions-Script-Backup/1.0)';
          }
          
          async testVersion(url, userAgent) {
            return new Promise((resolve, reject) => {
              const parsedUrl = new URL(url);
              const client = parsedUrl.protocol === 'https:' ? https : http;
              
              const options = {
                hostname: parsedUrl.hostname,
                port: parsedUrl.port,
                path: parsedUrl.pathname,
                method: 'HEAD', // 只获取头信息，快速测试
                headers: {
                  'User-Agent': userAgent,
                  'Accept': 'application/javascript, text/plain, */*'
                },
                timeout: 5000 // 5秒超时
              };
              
              const req = client.request(options, (res) => {
                if (res.statusCode === 200) {
                  resolve(true);
                } else if (res.statusCode === 403) {
                  resolve(false);
                } else {
                  resolve(false);
                }
              });
              
              req.on('error', () => resolve(false));
              req.on('timeout', () => {
                req.destroy();
                resolve(false);
              });
              
              req.end();
            });
          }
        }
        
        const detector = new VersionDetector();
        
        async function downloadFile(url, filename) {
          return new Promise(async (resolve, reject) => {
            try {
              // 智能探测User-Agent
              const userAgent = await detector.detectVersion(url);
              
              const parsedUrl = new URL(url);
              const client = parsedUrl.protocol === 'https:' ? https : http;
              
              const options = {
                hostname: parsedUrl.hostname,
                port: parsedUrl.port,
                path: parsedUrl.pathname,
                headers: {
                  'User-Agent': userAgent,
                  'Accept': 'application/javascript, text/plain, */*'
                }
              };
              
              const req = client.request(options, (res) => {
                console.log(\`请求 \${filename}: \${res.statusCode} (UA: \${userAgent.substring(0, 30)}...)\`);
                
                if (res.statusCode === 200) {
                  let data = '';
                  res.on('data', chunk => data += chunk);
                  res.on('end', () => {
                    // 验证是否为有效的JavaScript内容
                    if (data.trim().length < 100 || data.includes('<html>')) {
                      reject(new Error('返回内容无效'));
                      return;
                    }
                    
                    fs.writeFileSync(\`scripts/\${filename}\`, data);
                    console.log(\`✅ 已下载: \${filename} (\${data.length} bytes)\`);
                    resolve();
                  });
                } else if (res.statusCode >= 300 && res.statusCode < 400) {
                  // 处理重定向
                  downloadFile(res.headers.location, filename).then(resolve).catch(reject);
                } else {
                  reject(new Error(\`HTTP \${res.statusCode}: \${url}\`));
                }
              });
              
              req.on('error', reject);
              req.setTimeout(30000, () => {
                req.destroy();
                reject(new Error(\`超时: \${url}\`));
              });
              
              req.end();
            } catch (error) {
              reject(error);
            }
          });
        }
        
        async function main() {
          for (const script of config.scripts) {
            try {
              await downloadFile(script.url, script.filename);
              await new Promise(resolve => setTimeout(resolve, 1000)); // 延迟1秒
            } catch (error) {
              console.error(\`下载失败 \${script.filename}: \${error.message}\`);
              // 继续下载其他脚本，不中断流程
            }
          }
        }
        
        main().catch(console.error);
        "
        
    - name: 生成合集文件
      run: |
        node -e "
        const fs = require('fs');
        const crypto = require('crypto');
        
        const config = JSON.parse(fs.readFileSync('config/scripts.json', 'utf8'));
        
        const widgets = [];
        for (const script of config.scripts) {
          const scriptPath = \`scripts/\${script.filename}\`;
          if (fs.existsSync(scriptPath)) {
            const content = fs.readFileSync(scriptPath, 'utf8');
            const hash = crypto.createHash('sha256').update(content).digest('hex').substring(0, 8);
            
            widgets.push({
              id: script.id,
              title: script.title,
              description: script.description,
              requiredVersion: script.requiredVersion,
              version: \`1.0.\${hash.substring(0, 2)}\`,
              author: script.author,
              url: \`https://summer-water-d054.j1395468936.workers.dev/scripts/\${script.filename}\`
            });
          }
        }
        
        const collection = {
          title: config.collection.title,
          description: config.collection.description + ' (最后更新: ' + new Date().toLocaleString('zh-CN', {timeZone: 'Asia/Shanghai'}) + ')',
          icon: config.collection.icon,
          widgets: widgets
        };
        
        fs.writeFileSync('widgets.fwd', JSON.stringify(collection, null, 2));
        console.log('已生成 widgets.fwd');
        "
        
    - name: 更新统计信息
      run: |
        echo "## 📊 备份统计" > backup-stats.md
        echo "" >> backup-stats.md
        echo "- 🕒 最后更新: $(date '+%Y-%m-%d %H:%M:%S')" >> backup-stats.md
        echo "- 📁 脚本数量: $(ls -1 scripts/ | wc -l)" >> backup-stats.md
        echo "- 📄 脚本列表:" >> backup-stats.md
        echo "" >> backup-stats.md
        for file in scripts/*; do
          if [ -f "$file" ]; then
            size=$(stat -c%s "$file")
            echo "  - $(basename "$file") (${size} bytes)" >> backup-stats.md
          fi
        done
        
    - name: 提交更改
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        
        if git diff --staged --quiet; then
          echo "没有检测到变更"
        else
          git commit -m "🤖 自动备份脚本 $(date '+%Y-%m-%d %H:%M:%S')"
          git push
          echo "已提交更改"
        fi